// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // He usado supabase y esta url te la proporciona para migrations con prisma
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts Post[]

  likes Like[]

  saves SavedPosts[]

  followers  Follow[] @relation("UserFollowers")  // Quien te sigue a ti
  followings Follow[] @relation("UserFollowings") // A quien sigues tu
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Cuando se crea un post normal parentPostId es null (repost)
  rePostId Int?                                                                             //  Es el ID del post original que se está "reposteando". Es opcional porque no todos los posts son reposts.
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])                //  Es el post original que se está "reposteando"
  rePosts  Post[] @relation("RePosts")                                                      //  Es un array de Posts que son reposts del post actual

  // Cuando se crea un post normal parentPostId es null (comentario)
  parentPostId Int?                                                                         // Es el Id del post original al que se está comentando. Cuando creas un comentario, es técnicamente un nuevo Post pero con el parentPostId establecido al ID del post al que estás comentando
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])   // Es el post original al que se está comentando
  comments     Post[] @relation("PostComments")                                             // Es un array de Posts que son comentarios del post actual

  likes Like[]

  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String // El que sigue
  followingId String // El que es seguido

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}
